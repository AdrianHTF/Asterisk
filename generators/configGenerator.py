from random import randint

TRUNK = "trunk"
TARGET = "target"
SIP_CONF = "sip.conf"
CALL_LIST = "callList"
DEFAULT_CONFIG = """;--------------------------------------------------------------------------------;
; Do NOT edit this file as it is auto-generated by FreePBX. All modifications to ;
; this file must be done via the web gui. There are alternative files to make    ;
; custom modifications, details at: http://freepbx.org/configuration_files       ;
;--------------------------------------------------------------------------------;
[general]

; These files will all be included in the [general] context
;
#include sip_general_additional.conf

;sip_general_custom.conf is the proper file location for placing any sip general
;options that you might need set. For example: enable and force the sip jitterbuffer.
;If these settings are desired they should be set the sip_general_custom.conf file.
;
; jbenable=yes
; jbforce=yes
;
;It is also the proper place to add the lines needed for sip nat'ing when going
;through a firewall.  For nat'ing you'd need to add the following lines:
; nat=yes , externip= , localhost= , and optionally fromdomain= .
;
#include sip_general_custom.conf

;sip_nat.conf is here for legacy support reasons and for those that upgrade
;from previous versions.  If you have this file with lines in it please make
;sure they are not duplicated in sip_general_custom.conf, if so remove them
;from sip_nat.conf as sip_general_custom.conf will have precedence.
#include sip_nat.conf

;sip_registrations_custom.conf is for any customizations you might need to do to
;the automatically generated registrations that FreePBX makes.
;
#include sip_registrations_custom.conf
#include sip_registrations.conf

; These files should all be expected to come after the [general] context
;
#include sip_custom.conf
#include sip_additional.conf

;sip_custom_post.conf If you have extra parameters that are needed for a
;extension to work to for example, those go here.  So you have extension
;1000 defined in your system you start by creating a line [1000](+) in this
;file.  Then on the next line add the extra parameter that is needed.
;When the sip.conf is loaded it will append your additions to the end of
;that extension.
;
#include sip_custom_post.conf
"""

# fields for sip.conf
domains = []
users = []
secrets = []

# fields for callList
callList = []
trunkNames = []


def readTrunk(file):
    with open(file, "r")as input:
        for line in input:
            lines = line.split(',')
            print("lines: ", lines)
            domains.append(lines[0].rstrip('\n'))
            users.append(lines[1].rstrip('\n'))
            secrets.append(lines[2].rstrip('\n'))
    input.close()
    print(str(domains))
    print(str(users))
    print(str(secrets))


def writeSipConf(fileName):
    f = open(fileName, 'w+')
    # createDefaultConfig(f)
    createRegisterConfig(f)
    createNumberConfig(f)
    f.close()


def createDefaultConfig(file):
    file.write(DEFAULT_CONFIG)


def createRegisterConfig(file):
    counter = 0
    for x in range(len(domains)):
        file.write('register => ' + users[counter] + ':' + secrets[counter] + '@' + domains[counter] + '\n')


def createNumberConfig(file):
    counter = 0
    for x in range(len(domains)):
        trunkNames.append('number' + str(counter))
        file.write('\n[number' + str(counter) + ']\n' +
                   'type=peer\n' +
                   'context = name-record\n' +
                   'canreinvite = no\n' +
                   'defaultuser = ' + str(users[counter]) + '\n' +
                   'secret = ' + str(secrets[counter]) + '\n' +
                   'fromdomain = ' + str(domains[counter]) + '\n' +
                   'host = ' + str(domains[counter]) + '\n' +
                   'hassip = yes \n' +
                   'registersip = yes \n')
        counter += 1


def readTargetFile(file):
    targetList = []
    with open(file, "r")as input:
        for line in input:
            lines = line.split(',')
            print("callLine: ", lines)
            targetList.append(lines)
    input.close()
    return targetList


def writeCallList(file, targetList):
    output = open(file, "w+")
    for item in targetList:
        protocol = item[0]
        target = item[1]
        min = int(item[2])
        max = int(item[3])
        total = int(item[4])
        numberCount = len(trunkNames)
        callCount = []
        if numberCount * max < total:
            print("not enough numbers or to low amount of maximal calls to manage total calls")
            break
        for x in range(numberCount):
            callCount.append(min)
        total = total - min * numberCount
        while total > 0:
            index = randint(0, numberCount - 1)
            distributeCalls(callCount, index, max)
            total -= 1
        print(callCount)
        for x in range(numberCount):
            output.write(protocol+'/'+trunkNames[x]+'/'+target+','+str(callCount[x])+'\n')
    output.close()


def distributeCalls(callCount, index, max):
    if callCount[index] < max:
        callCount[index] = callCount[index] + 1
    elif callCount[index] >= max:
        if index < len(callCount):
            index += 1
        else:
            index = 0
        distributeCalls(callCount, index, max)

        # def moveToSharedFolder(filename):
        # TODO add move to sharedFolder


targetList = readTargetFile(TARGET)
readTrunk(TRUNK)
writeSipConf(SIP_CONF)
writeCallList(CALL_LIST, targetList)
print(trunkNames)
